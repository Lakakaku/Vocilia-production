/**
 * Customer Journey Simulator for End-to-End Testing
 * 
 * Simulates complete customer journeys through the AI feedback platform:
 * QR Scan ‚Üí Transaction Verification ‚Üí Voice Feedback ‚Üí AI Scoring ‚Üí Reward Payout
 */

const { v4: uuidv4 } = require('uuid');
const { MockTransactionGenerator } = require('./mock-transaction-generator');
const WebSocket = require('ws');
const axios = require('axios');
const { addSeconds, addMinutes, format } = require('date-fns');
const { sv } = require('date-fns/locale');

class CustomerJourneySimulator {
  constructor(config = {}) {
    this.config = {
      baseUrl: process.env.API_BASE_URL || 'http://localhost:3000',
      websocketUrl: process.env.WS_URL || 'ws://localhost:3001',
      
      // Swedish customer personas with realistic behavior patterns
      customerPersonas: {
        'M√•ns Studenten': {
          age: '18-25',
          feedbackStyle: 'Kort och k√§rnfull',
          techComfort: 'H√∂g',
          language: 'sv-SE',
          feedbackTopics: ['pris', 'snabbhet', 'app-upplevelse', 'studentrabatt'],
          sessionDuration: { min: 45, max: 90 }, // seconds
          qualityRange: { min: 65, max: 85 }
        },
        'Anna Familjef√∂rs√∂rjare': {
          age: '36-45',
          feedbackStyle: 'Detaljerad och konstruktiv',
          techComfort: 'Medium',
          language: 'sv-SE',
          feedbackTopics: ['produktkvalitet', 'barnv√§nlighet', 'parkeringsm√∂jligheter', '√∂ppettider'],
          sessionDuration: { min: 80, max: 140 },
          qualityRange: { min: 75, max: 95 }
        },
        'Erik Pension√§ren': {
          age: '65+',
          feedbackStyle: 'Grundlig och refleterad',
          techComfort: 'L√•g',
          language: 'sv-SE',
          feedbackTopics: ['personal-service', 'tillg√§nglighet', 'tydlighet', 'trygghet'],
          sessionDuration: { min: 100, max: 180 },
          qualityRange: { min: 70, max: 90 }
        },
        'Lisa Karri√§rkvinna': {
          age: '26-35',
          feedbackStyle: 'Effektiv och m√•lmedveten',
          techComfort: 'H√∂g',
          language: 'sv-SE',
          feedbackTopics: ['effektivitet', 'digitala-l√∂sningar', 'kvalitet', 'innovation'],
          sessionDuration: { min: 60, max: 100 },
          qualityRange: { min: 80, max: 95 }
        },
        'Ahmed Nyanl√§nd': {
          age: '26-35',
          feedbackStyle: 'J√§mf√∂rande och nyfiken',
          techComfort: 'Medium',
          language: 'sv-SE',
          feedbackTopics: ['kulturell-anpassning', 'spr√•kst√∂d', 'prisrimlighet', 'community'],
          sessionDuration: { min: 90, max: 150 },
          qualityRange: { min: 70, max: 85 }
        }
      },

      // Swedish feedback templates by business type and persona
      feedbackTemplates: {
        grocery_store: {
          positive: [
            'Jag handlar h√§r varje vecka och personalen √§r alltid trevlig och hj√§lpsam. Frukt och gr√∂nt-avdelningen har verkligen f√∂rb√§ttrats senaste m√•naden.',
            'Bra urval av ekologiska produkter och priserna √§r rimliga. Gillar att ni har svenska produkter i fokus, speciellt k√∂ttet fr√•n lokala g√•rdar.',
            'Smidigt med sj√§lvscanning och appen fungerar bra. K√∂erna g√•r snabbt √§ven p√• rusningstid. Barnvagnsparkeringen uppskattas verkligen.',
            'Utm√§rkt att ni √§r √∂ppna till sent p√• vardagar. Personalen i delikatessen ger alltid bra r√•d och det m√§rks att de har kunskap om produkterna.'
          ],
          constructive: [
            '√ñverlag n√∂jd men fruktavdelningen kunde vara fr√§schare, s√§rskilt p√• vardagskv√§llar. Kanske b√§ttre rutiner f√∂r p√•fyllning beh√∂vs.',
            'Bra butik men priserna p√• mejerivaror k√§nns h√∂ga j√§mf√∂rt med andra kedjor. Mer transparens kring priss√§ttning skulle uppskattas.',
            'Trevlig personal men ibland l√•nga k√∂er vid lunchtid. Kanske skulle en express-kassa f√∂r f√• varor hj√§lpa.',
            'Gillar konceptet men parkeringen √§r ofta full. Fler handikappplatser och b√§ttre skyltning skulle f√∂rb√§ttra tillg√§ngligheten.'
          ]
        },
        cafe: {
          positive: [
            'Mysig atmosf√§r och riktigt bra kaffe! Personalen k√§nner igen stamkunder och det skapar en hemk√§nsla. Kanelbullarna √§r fantastiska.',
            'Perfekt f√∂r arbetsm√∂ten med bra wifi och behaglig ljudniv√•. Vegetariska alternativen √§r kreativa och v√§lsmakande.',
            'Bra √∂ppettider och l√§get √§r perfekt f√∂r en snabb lunch. Gillar att ni anv√§nder √•tervinningsbara f√∂rpackningar.',
            'Trevlig personal som alltid ler och kommer ih√•g mitt kaffepreferens. Utomhusserveringen p√• sommaren √§r underbar.'
          ],
          constructive: [
            'Trevligt st√§lle men blir ofta tr√•ngt p√• lunchtid. Kanske kunde man optimera bordsplaceringen f√∂r fler sittplatser.',
            'Bra kaffe men priserna √§r lite h√∂ga f√∂r studentbudget. En happy hour eller studentrabatt skulle vara uppskattat.',
            'Gillar st√§llet men toaletten kunde vara renare och kanske b√§ttre ventilation i lokalen skulle hj√§lpa.',
            'Mysigt caf√© men servicen kan vara lite l√•ngsam n√§r det √§r mycket folk. Mer personal under rusningstid skulle hj√§lpa.'
          ]
        },
        restaurant: {
          positive: [
            'Fantastisk middag med v√§nner! Maten var v√§llagad och personalen professionell. Vinst√§ckad r√§tter och bra vegetariska alternativ.',
            'Utm√§rkt service och r√§tterna kom i perfekt takt. Kocken kom ut och fr√•gade hur allt smakade vilket k√§ndes personligt.',
            'Bra atmosphere f√∂r b√•de familjer och par. Barnmenyn var kreativ och inte bara pommes och korv som p√• m√•nga st√§llen.',
            'Imponerande lokal meny med s√§songsvaror. Gillar att ni st√∂ttar lokala leverant√∂rer och har transparens kring ursprung.'
          ],
          constructive: [
            'God mat men lite dyr f√∂r vad man f√•r. Portionerna kunde vara st√∂rre, s√§rskilt p√• huvudr√§tterna f√∂r priset.',
            'Trevlig lokal men lite f√∂r h√∂g ljudniv√• f√∂r konversation. Kanske akustikd√§mpning skulle f√∂rb√§ttra upplevelsen.',
            'Bra konsept men servicen var lite oj√§mn. F√∂rr√§tten kom fort men sedan v√§ntade vi l√§nge p√• huvudr√§tten.',
            'Gillade maten men √∂nskar fler veganska alternativ p√• menyn. Dagens soppa var dock excellent och personalen kunnig.'
          ]
        }
      },

      // Journey step timings (seconds)
      stepTimings: {
        qrScan: { min: 2, max: 8 },
        transactionEntry: { min: 15, max: 45 },
        voiceSetup: { min: 5, max: 15 },
        feedbackSession: { min: 45, max: 180 },
        aiProcessing: { min: 3, max: 12 },
        rewardProcessing: { min: 2, max: 8 }
      },

      // Success rates for different steps
      successRates: {
        qrScan: 0.98,
        transactionVerification: 0.94,
        voicePermission: 0.87,
        feedbackCompletion: 0.91,
        aiProcessing: 0.96,
        paymentProcessing: 0.93
      },

      ...config
    };

    this.transactionGenerator = new MockTransactionGenerator();
    this.journeyResults = [];
    this.activeJourneys = new Map();
  }

  /**
   * Simulate a single complete customer journey
   */
  async simulateCustomerJourney(options = {}) {
    const {
      businessType = 'grocery_store',
      persona = this.getRandomPersona(),
      qrCodeId = uuidv4(),
      includeErrorScenarios = true
    } = options;

    const journeyId = uuidv4();
    const startTime = Date.now();
    
    const journey = {
      journeyId,
      persona,
      businessType,
      qrCodeId,
      startTime,
      steps: [],
      finalStatus: 'in_progress',
      totalDuration: 0,
      rewardAmount: 0,
      errors: []
    };

    this.activeJourneys.set(journeyId, journey);

    try {
      // Step 1: QR Code Scan
      await this.simulateQRScan(journey, includeErrorScenarios);
      
      // Step 2: Transaction Verification  
      await this.simulateTransactionVerification(journey, includeErrorScenarios);
      
      // Step 3: Voice Permission Setup
      await this.simulateVoicePermissionSetup(journey, includeErrorScenarios);
      
      // Step 4: Voice Feedback Session
      await this.simulateVoiceFeedbackSession(journey, includeErrorScenarios);
      
      // Step 5: AI Processing & Scoring
      await this.simulateAIProcessing(journey, includeErrorScenarios);
      
      // Step 6: Reward Processing
      await this.simulateRewardProcessing(journey, includeErrorScenarios);
      
      journey.finalStatus = 'completed';
      
    } catch (error) {
      journey.finalStatus = 'failed';
      journey.errors.push({
        step: error.step || 'unknown',
        message: error.message,
        timestamp: Date.now()
      });
    }

    journey.totalDuration = Date.now() - startTime;
    this.journeyResults.push(journey);
    this.activeJourneys.delete(journeyId);
    
    return journey;
  }

  /**
   * Simulate multiple concurrent customer journeys
   */
  async simulateMultipleJourneys(config = {}) {
    const {
      count = 50,
      concurrency = 10,
      businessTypes = ['grocery_store', 'cafe', 'restaurant'],
      errorRate = 0.15,
      reportProgress = true
    } = config;

    console.log(`üöÄ Simulating ${count} customer journeys with ${concurrency} concurrent sessions`);
    
    const journeyPromises = [];
    const results = {
      total: count,
      completed: 0,
      failed: 0,
      byPersona: {},
      byBusinessType: {},
      averageDuration: 0,
      totalRewards: 0,
      errors: []
    };

    // Create journey promises in batches to control concurrency
    for (let i = 0; i < count; i += concurrency) {
      const batchSize = Math.min(concurrency, count - i);
      const batch = [];
      
      for (let j = 0; j < batchSize; j++) {
        const businessType = businessTypes[Math.floor(Math.random() * businessTypes.length)];
        const includeErrors = Math.random() < errorRate;
        
        batch.push(this.simulateCustomerJourney({
          businessType,
          includeErrorScenarios: includeErrors
        }));
      }
      
      // Wait for batch to complete before starting next batch
      const batchResults = await Promise.all(batch);
      
      // Update results
      batchResults.forEach(journey => {
        if (journey.finalStatus === 'completed') {
          results.completed++;
          results.totalRewards += journey.rewardAmount;
        } else {
          results.failed++;
          results.errors.push(...journey.errors);
        }
        
        // Track by persona
        if (!results.byPersona[journey.persona.name]) {
          results.byPersona[journey.persona.name] = { count: 0, avgDuration: 0, totalReward: 0 };
        }
        results.byPersona[journey.persona.name].count++;
        results.byPersona[journey.persona.name].totalReward += journey.rewardAmount;
        
        // Track by business type
        if (!results.byBusinessType[journey.businessType]) {
          results.byBusinessType[journey.businessType] = { count: 0, avgDuration: 0, successRate: 0 };
        }
        results.byBusinessType[journey.businessType].count++;
      });
      
      if (reportProgress) {
        const completed = results.completed + results.failed;
        console.log(`Progress: ${completed}/${count} journeys completed (${Math.round(completed/count*100)}%)`);
      }
    }

    // Calculate averages
    results.averageDuration = this.journeyResults
      .slice(-count)
      .reduce((sum, j) => sum + j.totalDuration, 0) / count;
      
    // Update persona averages
    Object.keys(results.byPersona).forEach(persona => {
      const personaJourneys = this.journeyResults
        .slice(-count)
        .filter(j => j.persona.name === persona);
      
      if (personaJourneys.length > 0) {
        results.byPersona[persona].avgDuration = 
          personaJourneys.reduce((sum, j) => sum + j.totalDuration, 0) / personaJourneys.length;
      }
    });

    return results;
  }

  // Individual journey step simulations

  async simulateQRScan(journey, includeErrors) {
    const stepStart = Date.now();
    const timing = this.getRandomTiming('qrScan');
    
    await this.delay(timing * 1000);
    
    // Simulate QR scan failures
    if (includeErrors && Math.random() > this.config.successRates.qrScan) {
      throw { step: 'qr_scan', message: 'QR-kod kunde inte l√§sas - d√•lig belysning eller skadad kod' };
    }
    
    journey.steps.push({
      step: 'qr_scan',
      duration: Date.now() - stepStart,
      status: 'success',
      data: {
        qrCodeId: journey.qrCodeId,
        businessType: journey.businessType,
        scannedAt: new Date().toISOString()
      }
    });
  }

  async simulateTransactionVerification(journey, includeErrors) {
    const stepStart = Date.now();
    const timing = this.getRandomTiming('transactionEntry');
    
    // Generate mock transaction
    const transaction = this.transactionGenerator.generateTransaction(journey.businessType);
    
    await this.delay(timing * 1000);
    
    // Simulate transaction verification failures
    if (includeErrors && Math.random() > this.config.successRates.transactionVerification) {
      throw { step: 'transaction_verification', message: 'Transaktionen kunde inte verifieras - kontrollera kvittodetaljer' };
    }
    
    journey.transaction = transaction;
    journey.steps.push({
      step: 'transaction_verification',
      duration: Date.now() - stepStart,
      status: 'success',
      data: {
        transactionId: transaction.transactionId,
        amount: transaction.amount,
        timestamp: transaction.timestamp,
        verified: true
      }
    });
  }

  async simulateVoicePermissionSetup(journey, includeErrors) {
    const stepStart = Date.now();
    const timing = this.getRandomTiming('voiceSetup');
    
    await this.delay(timing * 1000);
    
    // Simulate voice permission failures (common on mobile)
    if (includeErrors && Math.random() > this.config.successRates.voicePermission) {
      throw { step: 'voice_permission', message: 'Mikrofonbeh√∂righet nekades eller blockerades av webbl√§saren' };
    }
    
    journey.steps.push({
      step: 'voice_permission_setup',
      duration: Date.now() - stepStart,
      status: 'success',
      data: {
        deviceType: this.getRandomDeviceType(),
        browser: this.getRandomBrowser(),
        permissionGranted: true
      }
    });
  }

  async simulateVoiceFeedbackSession(journey, includeErrors) {
    const stepStart = Date.now();
    const persona = journey.persona;
    const sessionDuration = this.getRandomRange(persona.sessionDuration);
    
    // Generate contextual feedback based on persona and business
    const feedbackText = this.generateFeedback(journey.businessType, persona);
    
    await this.delay(sessionDuration * 1000);
    
    // Simulate feedback completion failures
    if (includeErrors && Math.random() > this.config.successRates.feedbackCompletion) {
      throw { step: 'feedback_session', message: 'R√∂stsessionen avbr√∂ts - f√∂r mycket bakgrundsljud eller tekniskt problem' };
    }
    
    journey.feedbackText = feedbackText;
    journey.steps.push({
      step: 'voice_feedback_session',
      duration: Date.now() - stepStart,
      status: 'success',
      data: {
        transcript: feedbackText,
        duration: sessionDuration,
        language: persona.language,
        audioQuality: this.getRandomRange({ min: 0.7, max: 0.95 })
      }
    });
  }

  async simulateAIProcessing(journey, includeErrors) {
    const stepStart = Date.now();
    const timing = this.getRandomTiming('aiProcessing');
    const persona = journey.persona;
    
    await this.delay(timing * 1000);
    
    // Simulate AI processing failures
    if (includeErrors && Math.random() > this.config.successRates.aiProcessing) {
      throw { step: 'ai_processing', message: 'AI-utv√§rdering misslyckades - systemfel eller otillr√§cklig feedbackkvalitet' };
    }
    
    // Generate quality score based on persona characteristics
    const qualityScore = this.generateQualityScore(journey.feedbackText, persona);
    
    journey.qualityScore = qualityScore;
    journey.steps.push({
      step: 'ai_processing',
      duration: Date.now() - stepStart,
      status: 'success',
      data: {
        qualityScore,
        reasoning: this.generateAIReasoning(qualityScore, persona),
        categories: this.detectFeedbackCategories(journey.feedbackText),
        confidence: this.getRandomRange({ min: 0.82, max: 0.97 })
      }
    });
  }

  async simulateRewardProcessing(journey, includeErrors) {
    const stepStart = Date.now();
    const timing = this.getRandomTiming('rewardProcessing');
    
    await this.delay(timing * 1000);
    
    // Simulate payment processing failures
    if (includeErrors && Math.random() > this.config.successRates.paymentProcessing) {
      throw { step: 'reward_processing', message: 'Bel√∂ningsutbetalning misslyckades - bankfel eller ogiltigt konto' };
    }
    
    // Calculate reward based on quality score and transaction amount
    const rewardPercentage = this.calculateRewardPercentage(journey.qualityScore);
    const rewardAmount = Math.round((journey.transaction.amount * rewardPercentage / 100) * 100) / 100;
    
    journey.rewardAmount = rewardAmount;
    journey.steps.push({
      step: 'reward_processing',
      duration: Date.now() - stepStart,
      status: 'success',
      data: {
        rewardAmount,
        rewardPercentage,
        qualityScore: journey.qualityScore.total,
        paymentMethod: 'Swish',
        paymentStatus: 'completed'
      }
    });
  }

  // Helper methods

  getRandomPersona() {
    const personas = Object.keys(this.config.customerPersonas);
    const personaName = personas[Math.floor(Math.random() * personas.length)];
    return {
      name: personaName,
      ...this.config.customerPersonas[personaName]
    };
  }

  getRandomTiming(stepName) {
    const timing = this.config.stepTimings[stepName];
    return Math.random() * (timing.max - timing.min) + timing.min;
  }

  getRandomRange(range) {
    return Math.random() * (range.max - range.min) + range.min;
  }

  getRandomDeviceType() {
    const devices = ['iPhone 14', 'iPhone 13', 'Samsung Galaxy S23', 'Google Pixel 7', 'OnePlus 11'];
    return devices[Math.floor(Math.random() * devices.length)];
  }

  getRandomBrowser() {
    const browsers = ['Safari Mobile', 'Chrome Mobile', 'Samsung Internet', 'Firefox Mobile'];
    const weights = [0.65, 0.25, 0.07, 0.03]; // iOS Safari dominance in Sweden
    
    let random = Math.random();
    for (let i = 0; i < browsers.length; i++) {
      random -= weights[i];
      if (random <= 0) return browsers[i];
    }
    return 'Safari Mobile';
  }

  generateFeedback(businessType, persona) {
    const templates = this.config.feedbackTemplates[businessType];
    if (!templates) return 'Bra service och trevlig personal. Kommer tillbaka snart.';
    
    // Choose between positive and constructive feedback based on persona
    const isPositive = Math.random() < 0.7; // 70% positive feedback
    const feedbackArray = isPositive ? templates.positive : templates.constructive;
    
    let feedback = feedbackArray[Math.floor(Math.random() * feedbackArray.length)];
    
    // Add persona-specific touches
    if (persona.feedbackTopics) {
      const topic = persona.feedbackTopics[Math.floor(Math.random() * persona.feedbackTopics.length)];
      if (Math.random() < 0.3) { // 30% chance to add persona-specific comment
        feedback += ` S√§rskilt viktigt f√∂r mig √§r ${topic.replace('-', ' ')}.`;
      }
    }
    
    return feedback;
  }

  generateQualityScore(feedbackText, persona) {
    const baseRange = persona.qualityRange;
    const total = Math.floor(Math.random() * (baseRange.max - baseRange.min) + baseRange.min);
    
    // Generate component scores that add up to total
    const authenticity = Math.floor(total * 0.4 + Math.random() * 10 - 5);
    const concreteness = Math.floor(total * 0.3 + Math.random() * 10 - 5);
    const depth = total - authenticity - concreteness + Math.floor(total * 0.3);
    
    return {
      authenticity: Math.max(0, Math.min(100, authenticity)),
      concreteness: Math.max(0, Math.min(100, concreteness)),
      depth: Math.max(0, Math.min(100, depth)),
      total: total
    };
  }

  generateAIReasoning(qualityScore, persona) {
    const reasons = [];
    
    if (qualityScore.authenticity > 80) {
      reasons.push('Autentisk feedback med specifika observationer fr√•n verklig kundupplevelse');
    }
    if (qualityScore.concreteness > 75) {
      reasons.push('Konkret och handlingsbar information som f√∂retaget kan anv√§nda f√∂r f√∂rb√§ttringar');
    }
    if (qualityScore.depth > 70) {
      reasons.push('Djupg√•ende analys som visar reflektion och genomtanke');
    }
    
    if (reasons.length === 0) {
      reasons.push('Grundl√§ggande feedback som ger viss v√§rde men kunde varit mer detaljerad');
    }
    
    return reasons.join('. ') + '.';
  }

  detectFeedbackCategories(feedbackText) {
    const categoryKeywords = {
      'Service': ['personal', 'service', 'hj√§lpsam', 'trevlig', 'kunnig'],
      'Produkt': ['kvalitet', 'fr√§sch', 'urval', 'produkter', 'varor'],
      'Milj√∂': ['atmosf√§r', 'mysig', 'ren', 'ljus', 'musik'],
      'Pris': ['pris', 'billig', 'dyr', 'rimlig', 'kostnad'],
      'Tillg√§nglighet': ['tillg√§nglig', 'parkering', '√∂ppettider', 'l√§tt', 'sv√•r']
    };
    
    const categories = [];
    const lowerText = feedbackText.toLowerCase();
    
    Object.entries(categoryKeywords).forEach(([category, keywords]) => {
      if (keywords.some(keyword => lowerText.includes(keyword))) {
        categories.push(category);
      }
    });
    
    return categories.length > 0 ? categories : ['Allm√§nt'];
  }

  calculateRewardPercentage(qualityScore) {
    // 1-12% reward range based on quality score
    const minReward = 1;
    const maxReward = 12;
    const normalizedScore = qualityScore.total / 100;
    
    return minReward + (normalizedScore * (maxReward - minReward));
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * Generate comprehensive test report
   */
  generateTestReport(results) {
    const report = {
      testSummary: {
        totalJourneys: results.total,
        successRate: `${Math.round((results.completed / results.total) * 100)}%`,
        averageDuration: `${Math.round(results.averageDuration / 1000)}s`,
        totalRewardsDistributed: `${results.totalRewards.toFixed(2)} SEK`,
        averageRewardPerJourney: `${(results.totalRewards / results.completed).toFixed(2)} SEK`
      },
      
      performanceMetrics: {
        byPersona: results.byPersona,
        byBusinessType: results.byBusinessType,
        stepPerformance: this.analyzeStepPerformance()
      },
      
      errorAnalysis: {
        totalErrors: results.errors.length,
        errorsByStep: this.groupErrorsByStep(results.errors),
        mostCommonErrors: this.getMostCommonErrors(results.errors)
      },
      
      recommendations: this.generateRecommendations(results),
      
      swedishPilotReadiness: {
        score: this.calculatePilotReadiness(results),
        criticalIssues: this.identifyCriticalIssues(results),
        strengths: this.identifySystemStrengths(results)
      }
    };
    
    return report;
  }

  analyzeStepPerformance() {
    const stepAnalysis = {};
    
    this.journeyResults.forEach(journey => {
      journey.steps.forEach(step => {
        if (!stepAnalysis[step.step]) {
          stepAnalysis[step.step] = {
            totalExecutions: 0,
            totalDuration: 0,
            successCount: 0,
            averageDuration: 0,
            successRate: 0
          };
        }
        
        stepAnalysis[step.step].totalExecutions++;
        stepAnalysis[step.step].totalDuration += step.duration;
        if (step.status === 'success') {
          stepAnalysis[step.step].successCount++;
        }
      });
    });
    
    // Calculate averages
    Object.keys(stepAnalysis).forEach(step => {
      const analysis = stepAnalysis[step];
      analysis.averageDuration = Math.round(analysis.totalDuration / analysis.totalExecutions);
      analysis.successRate = Math.round((analysis.successCount / analysis.totalExecutions) * 100);
    });
    
    return stepAnalysis;
  }

  groupErrorsByStep(errors) {
    const grouped = {};
    errors.forEach(error => {
      if (!grouped[error.step]) {
        grouped[error.step] = [];
      }
      grouped[error.step].push(error.message);
    });
    return grouped;
  }

  getMostCommonErrors(errors) {
    const errorCounts = {};
    errors.forEach(error => {
      const key = `${error.step}: ${error.message}`;
      errorCounts[key] = (errorCounts[key] || 0) + 1;
    });
    
    return Object.entries(errorCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([error, count]) => ({ error, count }));
  }

  generateRecommendations(results) {
    const recommendations = [];
    
    if (results.completed / results.total < 0.9) {
      recommendations.push('F√∂rb√§ttra systemstabilitet - mindre √§n 90% framg√•ngsrate');
    }
    
    if (results.averageDuration > 180000) { // > 3 minutes
      recommendations.push('Optimera prestanda - genomsnittstid √∂ver 3 minuter');
    }
    
    if (results.totalRewards / results.completed < 15) {
      recommendations.push('Granska bel√∂ningsalgoritm - l√•g genomsnittlig bel√∂ning');
    }
    
    return recommendations;
  }

  calculatePilotReadiness(results) {
    let score = 100;
    
    // Deduct points for issues
    const successRate = results.completed / results.total;
    if (successRate < 0.95) score -= (0.95 - successRate) * 100;
    
    if (results.averageDuration > 120000) score -= 10; // Slow performance
    if (results.errors.length > results.total * 0.1) score -= 15; // Too many errors
    
    return Math.max(0, Math.round(score));
  }

  identifyCriticalIssues(results) {
    const issues = [];
    
    if (results.completed / results.total < 0.85) {
      issues.push('L√•g framg√•ngsrate - kritiskt f√∂r anv√§ndarupplevelse');
    }
    
    const voiceErrors = results.errors.filter(e => e.step === 'voice_permission').length;
    if (voiceErrors > results.total * 0.15) {
      issues.push('F√∂r m√•nga r√∂sttillst√•ndsproblem - p√•verkar mobil UX');
    }
    
    return issues;
  }

  identifySystemStrengths(results) {
    const strengths = [];
    
    if (results.completed / results.total > 0.92) {
      strengths.push('H√∂g systemstabilitet och tillf√∂rlitlighet');
    }
    
    if (results.totalRewards / results.completed > 20) {
      strengths.push('Attraktiv bel√∂ningsniv√• f√∂r kunder');
    }
    
    if (results.averageDuration < 90000) {
      strengths.push('Snabb och effektiv anv√§ndarupplevelse');
    }
    
    return strengths;
  }
}

module.exports = { CustomerJourneySimulator };

// CLI usage example
if (require.main === module) {
  const simulator = new CustomerJourneySimulator();
  
  async function runSimulation() {
    console.log('üá∏üá™ Customer Journey Simulator - AI Feedback Platform Testing');
    console.log('============================================================\n');
    
    // Single journey test
    console.log('Testing single customer journey...');
    const singleJourney = await simulator.simulateCustomerJourney({
      businessType: 'grocery_store',
      includeErrorScenarios: false
    });
    
    console.log(`‚úÖ Journey completed in ${Math.round(singleJourney.totalDuration/1000)}s`);
    console.log(`   Persona: ${singleJourney.persona.name}`);
    console.log(`   Quality Score: ${singleJourney.qualityScore?.total || 'N/A'}`);
    console.log(`   Reward: ${singleJourney.rewardAmount} SEK\n`);
    
    // Multiple journeys test
    console.log('Running batch simulation (20 journeys)...');
    const results = await simulator.simulateMultipleJourneys({
      count: 20,
      concurrency: 5,
      errorRate: 0.1
    });
    
    const report = simulator.generateTestReport(results);
    
    console.log('\nüìä Test Results Summary:');
    console.log(`   Success Rate: ${report.testSummary.successRate}`);
    console.log(`   Average Duration: ${report.testSummary.averageDuration}`);
    console.log(`   Total Rewards: ${report.testSummary.totalRewardsDistributed}`);
    console.log(`   Pilot Readiness: ${report.swedishPilotReadiness.score}/100`);
    
    if (report.swedishPilotReadiness.criticalIssues.length > 0) {
      console.log('\n‚ö†Ô∏è  Critical Issues:');
      report.swedishPilotReadiness.criticalIssues.forEach(issue => 
        console.log(`   - ${issue}`)
      );
    }
    
    if (report.swedishPilotReadiness.strengths.length > 0) {
      console.log('\nüí™ System Strengths:');
      report.swedishPilotReadiness.strengths.forEach(strength => 
        console.log(`   - ${strength}`)
      );
    }
  }
  
  runSimulation().catch(console.error);
}