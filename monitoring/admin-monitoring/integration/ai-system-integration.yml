# AI System Integration Configuration
# Connects admin monitoring with existing AI evaluation and voice processing systems

# AI System Prometheus Federation Configuration
ai_system_federation:
  job_name: 'federate-ai-system'
  scrape_interval: 30s
  scrape_timeout: 15s
  honor_labels: true
  metrics_path: '/federate'
  params:
    'match[]':
      # AI evaluation metrics
      - '{__name__=~"ai_.*"}'
      - '{__name__=~"ollama_.*"}'
      - '{__name__=~"llama_.*"}'
      - '{__name__=~"openai_.*"}'
      - '{__name__=~"anthropic_.*"}'
      # Voice processing metrics
      - '{__name__=~"voice_.*"}'
      - '{__name__=~"whisper_.*"}'
      - '{__name__=~"tts_.*"}'
      - '{__name__=~"audio_.*"}'
      # Quality scoring metrics
      - '{__name__=~"quality_.*"}'
      - '{__name__=~"feedback_.*"}'
      - '{__name__=~"scoring_.*"}'
      # Fraud detection metrics
      - '{__name__=~"fraud_.*"}'
      - '{__name__=~"anomaly_.*"}'
  static_configs:
    - targets: ['ai-prometheus:9090', 'voice-prometheus:9090']
  relabel_configs:
    - source_labels: [__address__]
      target_label: federated_from
      replacement: 'ai-system'
    - source_labels: [__name__]
      target_label: metric_source
      replacement: 'ai_evaluation'

# AI Service Direct Scraping
ai_service_scraping:
  - job_name: 'ai-evaluator-service'
    static_configs:
      - targets: ['ai-evaluator:3000']
    scrape_interval: 15s
    metrics_path: '/metrics'
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'ai-evaluator'
      - source_labels: [__address__]
        target_label: ai_provider
        replacement: 'ollama'

  - job_name: 'voice-processor'
    static_configs:
      - targets: ['voice-processor:3000']
    scrape_interval: 15s
    metrics_path: '/metrics'
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'voice-processor'
      - source_labels: [__address__]
        target_label: processing_type
        replacement: 'stt_tts'

  - job_name: 'scoring-engine'
    static_configs:
      - targets: ['scoring-engine:3000']
    scrape_interval: 10s
    metrics_path: '/metrics'
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'scoring-engine'
      - source_labels: [__address__]
        target_label: swedish_pilot
        replacement: 'true'

  - job_name: 'fraud-detector'
    static_configs:
      - targets: ['fraud-detector:3000']
    scrape_interval: 20s
    metrics_path: '/metrics'
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'fraud-detector'

# AI System Alert Integration Rules
ai_alert_integration:
  - alert: AISystemCriticalFailure
    expr: up{job=~"ai-.*|voice-.*|scoring-.*"} == 0
    for: 2m
    labels:
      severity: critical
      team: admin
      integration: ai_system
      swedish_pilot: "true"
    annotations:
      summary: "Critical AI system component down"
      description: "{{ $labels.job }} service is unavailable, affecting Swedish pilot operations"
      runbook_url: "https://docs.ai-feedback.se/runbooks/ai-system-failure"
      impact: "Customer feedback processing and quality scoring disrupted"

  - alert: SwedishFeedbackQualityDrop
    expr: |
      avg_over_time(
        avg by (region) (ai_quality_score{country="sweden"})[30m:]
      ) < 60
    for: 15m
    labels:
      severity: warning
      team: pilot_management
      integration: ai_quality
    annotations:
      summary: "Swedish pilot feedback quality scores dropping"
      description: "Average quality score in {{ $labels.region }} is {{ $value }}, below 60% threshold"

  - alert: AIModelPerformanceDegradation
    expr: |
      (
        rate(ai_evaluation_duration_seconds_sum[5m]) /
        rate(ai_evaluation_duration_seconds_count[5m])
      ) > 10
    for: 10m
    labels:
      severity: warning
      team: ai_engineering
      integration: ai_performance
    annotations:
      summary: "AI model response time degraded"
      description: "Average AI evaluation time is {{ $value }}s, above 10s threshold"

  - alert: VoiceProcessingErrors
    expr: |
      rate(voice_processing_errors_total{language="swedish"}[5m]) > 0.1
    for: 5m
    labels:
      severity: warning
      team: voice_engineering
      integration: voice_processing
    annotations:
      summary: "High Swedish voice processing error rate"
      description: "{{ $value }} voice processing errors per second for Swedish language"

  - alert: FraudDetectionAnomaly
    expr: |
      fraud_risk_score{risk_level="high"} > 10
    for: 2m
    labels:
      severity: critical
      team: security
      integration: fraud_detection
    annotations:
      summary: "High fraud risk detected in Swedish pilot"
      description: "{{ $value }} high-risk fraud events detected"
      runbook_url: "https://docs.ai-feedback.se/runbooks/fraud-response"

# AI Data Enrichment for Admin Dashboards
ai_data_enrichment:
  # Quality score trends by Swedish region
  quality_trends_query: |
    avg_over_time(
      avg by (region, business_tier) (
        ai_quality_score{country="sweden"} *
        on(business_id) group_left(region, business_tier) admin_swedish_pilot_businesses
      )[24h:]
    )

  # AI provider performance comparison
  ai_provider_performance: |
    histogram_quantile(0.95, 
      sum(rate(ai_evaluation_duration_seconds_bucket[5m])) by (ai_provider, le)
    )

  # Voice processing accuracy by Swedish dialect
  voice_accuracy_analysis: |
    avg by (dialect, region) (
      voice_recognition_accuracy{language="swedish"} *
      on(session_id) group_left(dialect, region) voice_session_metadata
    )

  # Fraud risk assessment by business
  fraud_risk_monitoring: |
    max by (business_id, business_name) (
      fraud_risk_score *
      on(business_id) group_left(business_name) admin_swedish_pilot_businesses
    )

# Grafana Dashboard Integration Queries
grafana_ai_integration:
  # AI system health overview
  - title: "AI System Health"
    query: |
      avg by (service) (up{job=~"ai-.*|voice-.*|scoring-.*"}) * 100
    legend: "{{service}} Uptime %"

  # Swedish feedback quality distribution
  - title: "Swedish Pilot Quality Distribution"
    query: |
      histogram_quantile(0.50, 
        sum(rate(ai_quality_score_bucket{country="sweden"}[5m])) by (region, le)
      )
    legend: "{{region}} Median Quality"

  # AI processing latency trends
  - title: "AI Processing Performance"
    query: |
      rate(ai_evaluation_duration_seconds_sum[5m]) /
      rate(ai_evaluation_duration_seconds_count[5m])
    legend: "{{ai_provider}} Avg Response Time"

  # Voice processing volume by language
  - title: "Voice Processing Volume"
    query: |
      sum by (language, processing_type) (
        rate(voice_processing_total[5m])
      )
    legend: "{{language}} {{processing_type}}"

# Webhook Integration for AI Events
webhook_integration:
  ai_evaluation_webhook:
    endpoint: "http://admin-activity-logger:3000/webhooks/ai-evaluation"
    events:
      - "evaluation.completed"
      - "evaluation.failed"
      - "quality.threshold_breached"
    swedish_pilot_filter: true
    activity_logging: true

  voice_processing_webhook:
    endpoint: "http://admin-activity-logger:3000/webhooks/voice-processing"
    events:
      - "transcription.completed"
      - "transcription.failed"
      - "tts.generated"
      - "audio.quality_issue"
    language_filter: ["swedish", "english"]
    compliance_logging: true

  fraud_detection_webhook:
    endpoint: "http://admin-activity-logger:3000/webhooks/fraud-detection"
    events:
      - "fraud.detected"
      - "risk.escalated"
      - "anomaly.identified"
    immediate_alerting: true
    security_logging: true

# Database Integration for AI Metrics
database_integration:
  ai_metrics_sync:
    - name: "sync_quality_scores"
      schedule: "*/2 * * * *" # Every 2 minutes
      query: |
        INSERT INTO admin_feedback_quality_metrics (
          business_id, session_id, quality_score_total, 
          authenticity_score, concreteness_score, depth_score,
          ai_provider, evaluation_time, created_at, swedish_pilot
        )
        SELECT 
          f.business_id, f.session_id, f.quality_score_total,
          f.authenticity_score, f.concreteness_score, f.depth_score,
          f.ai_provider, f.evaluation_duration, f.created_at, true as swedish_pilot
        FROM feedback f
        JOIN businesses b ON f.business_id = b.id
        WHERE b.pilot_program = true
          AND f.created_at >= NOW() - INTERVAL '2 minutes'
        ON CONFLICT (session_id) DO UPDATE SET
          quality_score_total = EXCLUDED.quality_score_total,
          ai_provider = EXCLUDED.ai_provider,
          evaluation_time = EXCLUDED.evaluation_time;

    - name: "sync_voice_processing_stats"
      schedule: "*/5 * * * *" # Every 5 minutes
      query: |
        INSERT INTO admin_voice_processing_stats (
          session_id, processing_duration, transcription_accuracy,
          language_detected, audio_quality_score, processing_errors,
          created_at, swedish_pilot
        )
        SELECT 
          vp.session_id, vp.processing_duration, vp.transcription_accuracy,
          vp.language_detected, vp.audio_quality_score, vp.error_count,
          vp.created_at, true as swedish_pilot
        FROM voice_processing_stats vp
        JOIN feedback_sessions fs ON vp.session_id = fs.id
        JOIN businesses b ON fs.business_id = b.id
        WHERE b.pilot_program = true
          AND vp.created_at >= NOW() - INTERVAL '5 minutes';

    - name: "sync_fraud_assessments"
      schedule: "*/1 * * * *" # Every 1 minute (critical for security)
      query: |
        INSERT INTO admin_fraud_assessments (
          session_id, business_id, risk_score, fraud_indicators,
          detection_methods, confidence_level, created_at, swedish_pilot
        )
        SELECT 
          fa.session_id, fa.business_id, fa.risk_score, fa.indicators,
          fa.detection_methods, fa.confidence_level, fa.created_at, true
        FROM fraud_assessments fa
        JOIN businesses b ON fa.business_id = b.id
        WHERE b.pilot_program = true
          AND fa.created_at >= NOW() - INTERVAL '1 minute';

# Real-time AI Event Streaming
redis_streaming:
  # AI evaluation events
  ai_evaluation_stream:
    channel: "admin:ai:evaluations"
    message_format:
      session_id: "{{ .SessionID }}"
      business_id: "{{ .BusinessID }}"
      quality_score: "{{ .QualityScore }}"
      ai_provider: "{{ .AIProvider }}"
      evaluation_time: "{{ .EvaluationTime }}"
      timestamp: "{{ .Timestamp }}"
      swedish_pilot: true

  # Voice processing events
  voice_processing_stream:
    channel: "admin:voice:processing"
    message_format:
      session_id: "{{ .SessionID }}"
      processing_type: "{{ .ProcessingType }}" # STT or TTS
      language: "{{ .Language }}"
      duration: "{{ .Duration }}"
      accuracy: "{{ .Accuracy }}"
      timestamp: "{{ .Timestamp }}"

  # Fraud detection alerts
  fraud_detection_stream:
    channel: "admin:fraud:alerts"
    message_format:
      session_id: "{{ .SessionID }}"
      business_id: "{{ .BusinessID }}"
      risk_score: "{{ .RiskScore }}"
      risk_level: "{{ .RiskLevel }}"
      indicators: "{{ .Indicators }}"
      timestamp: "{{ .Timestamp }}"
      requires_action: "{{ .RequiresAction }}"

# Machine Learning Model Monitoring
ml_model_monitoring:
  # Model performance tracking
  model_metrics:
    - name: "quality_scoring_accuracy"
      query: |
        rate(ai_quality_predictions_correct_total[5m]) /
        rate(ai_quality_predictions_total[5m]) * 100
      threshold: 85 # 85% accuracy minimum
      
    - name: "fraud_detection_precision"
      query: |
        rate(fraud_true_positives_total[5m]) /
        (rate(fraud_true_positives_total[5m]) + rate(fraud_false_positives_total[5m])) * 100
      threshold: 90 # 90% precision minimum
      
    - name: "voice_recognition_accuracy"
      query: |
        avg by (language) (voice_recognition_accuracy{language="swedish"})
      threshold: 80 # 80% accuracy for Swedish

  # Model drift detection
  drift_monitoring:
    - name: "quality_score_distribution_drift"
      baseline_query: "histogram_quantile(0.50, ai_quality_score_bucket{country=\"sweden\"})"
      current_query: "histogram_quantile(0.50, ai_quality_score_bucket{country=\"sweden\"}[1h])"
      drift_threshold: 0.1 # 10% drift threshold
      
    - name: "fraud_score_distribution_drift" 
      baseline_query: "histogram_quantile(0.95, fraud_risk_score_bucket)"
      current_query: "histogram_quantile(0.95, fraud_risk_score_bucket[2h])"
      drift_threshold: 0.15 # 15% drift threshold

# Health Checks for AI Integration
health_checks:
  ai_integration_health:
    - name: "ai_system_federation"
      endpoint: "http://admin-prometheus:9090/api/v1/targets"
      check: |
        curl -s "$endpoint" | jq '.data.activeTargets[] | select(.labels.job == "federate-ai-system") | .health' | grep -q "up"
      interval: "30s"
      
    - name: "ai_evaluator_connectivity"
      endpoint: "http://ai-evaluator:3000/health"
      check: |
        curl -f -s "$endpoint" | jq -r '.status' | grep -q "healthy"
      interval: "15s"
      
    - name: "voice_processor_health"
      endpoint: "http://voice-processor:3000/health"
      check: |
        curl -f -s "$endpoint" | jq -r '.voice_processing' | grep -q "active"
      interval: "20s"
      
    - name: "scoring_engine_performance"
      endpoint: "http://scoring-engine:3000/metrics"
      check: |
        curl -s "$endpoint" | grep -q "scoring_engine_healthy 1"
      interval: "10s"

# Environment Variables for AI Integration
environment_variables:
  AI_PROMETHEUS_URL: "http://ai-prometheus:9090"
  VOICE_PROMETHEUS_URL: "http://voice-prometheus:9090" 
  AI_EVALUATOR_URL: "http://ai-evaluator:3000"
  VOICE_PROCESSOR_URL: "http://voice-processor:3000"
  SCORING_ENGINE_URL: "http://scoring-engine:3000"
  FRAUD_DETECTOR_URL: "http://fraud-detector:3000"
  OLLAMA_ENDPOINT: "${OLLAMA_ENDPOINT}"
  OPENAI_API_KEY: "${OPENAI_API_KEY}"
  AI_INTEGRATION_ENABLED: "true"
  SWEDISH_LANGUAGE_SUPPORT: "true"
  VOICE_PROCESSING_ENABLED: "true"
  FRAUD_DETECTION_ENABLED: "true"