version: '3.8'

services:
  # Prometheus Server - Main metrics collection and storage
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ai-feedback-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alerts:/etc/prometheus/alerts
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    networks:
      - monitoring
    depends_on:
      - business-metrics-exporter
      - node-exporter
      - postgres-exporter
      - redis-exporter

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: ai-feedback-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_DEFAULT_THEME=dark
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_SERVER_ROOT_URL=https://monitoring.feedback.your-domain.com
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST:-localhost:587}
      - GF_SMTP_USER=${SMTP_USER:-admin@feedback.com}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
    networks:
      - monitoring
    depends_on:
      - prometheus

  # AlertManager - Alert routing and notification
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: ai-feedback-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/config.yml:/etc/alertmanager/alertmanager.yml
      - ./alertmanager/templates:/etc/alertmanager/templates
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alerts.feedback.your-domain.com'
      - '--web.route-prefix=/'
      - '--log.level=info'
    networks:
      - monitoring

  # Custom Business Metrics Exporter
  business-metrics-exporter:
    build:
      context: .
      dockerfile: Dockerfile.business-metrics-exporter
    container_name: ai-feedback-business-metrics
    restart: unless-stopped
    ports:
      - "9091:9090"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - NODE_ENV=production
    volumes:
      - ./comprehensive-business-metrics-exporter.js:/app/server.js
    networks:
      - monitoring
      - app-network
    depends_on:
      - postgres
      - redis

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: ai-feedback-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring

  # PostgreSQL Exporter - Database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.12.0
    container_name: ai-feedback-postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=${DATABASE_URL}
      - PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres_exporter/queries.yaml
    volumes:
      - ./postgres-queries.yaml:/etc/postgres_exporter/queries.yaml
    networks:
      - monitoring
      - app-network
    depends_on:
      - postgres

  # Redis Exporter - Cache metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.52.0
    container_name: ai-feedback-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=${REDIS_URL:-redis://redis:6379}
      - REDIS_EXPORTER_DEBUG=false
      - REDIS_EXPORTER_LOG_FORMAT=txt
    networks:
      - monitoring
      - app-network
    depends_on:
      - redis

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: ai-feedback-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    networks:
      - monitoring

  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.8.0
    container_name: ai-feedback-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring

  # Promtail - Log shipping agent
  promtail:
    image: grafana/promtail:2.8.0
    container_name: ai-feedback-promtail
    restart: unless-stopped
    volumes:
      - ./promtail.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    depends_on:
      - loki

  # Jaeger - Distributed tracing (optional)
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: ai-feedback-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=9411
    networks:
      - monitoring

  # Load Testing Metrics Collector
  load-testing-collector:
    build:
      context: ../tests/performance
      dockerfile: Dockerfile.load-testing
    container_name: ai-feedback-load-testing
    restart: unless-stopped
    ports:
      - "9092:9090"
    environment:
      - API_GATEWAY_URL=http://api-gateway:3001
      - WEBSOCKET_URL=ws://api-gateway:3001
      - TEST_INTERVAL=300000  # 5 minutes
      - CONCURRENT_USERS=100
    volumes:
      - load_test_results:/app/results
    networks:
      - monitoring
      - app-network
    depends_on:
      - api-gateway

  # Supporting services (if not already running)
  postgres:
    image: postgres:15-alpine
    container_name: ai-feedback-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-ai_feedback}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7.0-alpine
    container_name: ai-feedback-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (for testing integration)
  api-gateway:
    build:
      context: ../apps/api-gateway
      dockerfile: Dockerfile
    container_name: ai-feedback-api-gateway
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379
      - PORT=3001
    networks:
      - app-network
      - monitoring
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy for monitoring services
  monitoring-proxy:
    image: nginx:alpine
    container_name: ai-feedback-monitoring-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/monitoring.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - monitoring
    depends_on:
      - prometheus
      - grafana
      - alertmanager

networks:
  monitoring:
    driver: bridge
    name: ai-feedback-monitoring
  app-network:
    driver: bridge
    name: ai-feedback-app

volumes:
  prometheus_data:
    name: ai-feedback-prometheus-data
  grafana_data:
    name: ai-feedback-grafana-data
  alertmanager_data:
    name: ai-feedback-alertmanager-data
  loki_data:
    name: ai-feedback-loki-data
  postgres_data:
    name: ai-feedback-postgres-data
  redis_data:
    name: ai-feedback-redis-data
  load_test_results:
    name: ai-feedback-load-test-results