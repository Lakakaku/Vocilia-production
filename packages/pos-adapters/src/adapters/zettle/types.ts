import { POSCredentials } from '../../types';

/**
 * Zettle API Types
 * 
 * Type definitions for PayPal Zettle (formerly iZettle) POS integration
 * Specifically designed for Swedish market features
 */

export interface ZettleCredentials extends POSCredentials {
  provider: 'zettle';
  accessToken: string;
  refreshToken?: string;
  clientId?: string;
  clientSecret?: string;
  organizationId?: string;
  merchantId?: string;
}

export interface ZettleAuthConfig {
  clientId: string;
  clientSecret: string;
  redirectUri: string;
  scope: string[];
}

export interface ZettleMerchant {
  uuid: string;
  identifier: string;
  name: string;
  organizationType: string;
  country: 'SE' | string; // Sweden as primary market
  currency: 'SEK' | string; // Swedish Krona as primary currency
  contactEmail?: string;
  address?: ZettleAddress;
  createdAt: string;
  updatedAt: string;
  status: 'ACTIVE' | 'SUSPENDED' | 'CLOSED';
  acceptedAgreements?: string[];
  organizationNumber?: string; // Swedish organization number
  vatNumber?: string; // EU VAT number
}

export interface ZettleAddress {
  addressLine1: string;
  addressLine2?: string;
  city: string;
  postalCode: string;
  country: string;
  region?: string;
}

export interface ZettleLocation {
  uuid: string;
  name: string;
  type: 'STORE' | 'MOBILE' | 'POPUP' | 'OTHER';
  address?: ZettleAddress;
  phoneNumber?: string;
  timezone: string;
  description?: string;
  status: 'ACTIVE' | 'INACTIVE';
  createdAt: string;
  updatedAt: string;
  devices?: ZettleDevice[];
  coordinates?: {
    latitude: number;
    longitude: number;
  };
}

export interface ZettleDevice {
  uuid: string;
  name: string;
  model: string;
  status: 'ONLINE' | 'OFFLINE' | 'INACTIVE';
  lastSeen?: string;
  locationId?: string;
  softwareVersion?: string;
  serialNumber?: string;
}

export interface ZettlePurchase {
  purchaseUUID: string;
  amount: number; // In minor units (Ã¶re for SEK)
  currency: string;
  timestamp: string;
  reference?: string;
  description?: string;
  receiptNumber?: string;
  globalPurchaseNumber?: string;
  products?: ZettleProduct[];
  payments?: ZettlePayment[];
  cardPayments?: ZettleCardPayment[];
  cashPayments?: ZettleCashPayment[];
  voucherPayments?: ZettleVoucherPayment[];
  refund?: ZettleRefund;
  refunded?: boolean;
  vat?: ZettleVat;
  serviceCharge?: number;
  gratuity?: number;
  cashback?: number;
  locationId?: string;
  userId?: string;
  deviceId?: string;
  created?: string;
  updated?: string;
}

export interface ZettleProduct {
  name: string;
  quantity: number;
  unitPrice: number;
  autoGenerated?: boolean;
  rowNumber?: number;
  discountAmount?: number;
  vatRate?: number;
  productUuid?: string;
  variantUuid?: string;
  libraryProduct?: boolean;
  imageLookupKey?: string[];
  customAttributes?: Record<string, any>;
}

export interface ZettlePayment {
  uuid: string;
  amount: number;
  type: 'CARD' | 'CASH' | 'VOUCHER' | 'MOBILE' | 'SWISH' | 'INVOICE';
  attributes?: Record<string, any>;
}

export interface ZettleCardPayment {
  uuid: string;
  amount: number;
  cardType?: string;
  maskedPan?: string;
  cardholderName?: string;
  authorizationCode?: string;
  referenceNumber?: string;
  applicationName?: string;
  terminalVerificationResults?: string;
  applicationIdentifier?: string;
  numberOfInstallments?: number;
  installmentAmount?: number;
}

export interface ZettleCashPayment {
  uuid: string;
  amount: number;
  handedAmount?: number;
  changeAmount?: number;
}

export interface ZettleVoucherPayment {
  uuid: string;
  amount: number;
  voucherType?: string;
  voucherNumber?: string;
}

export interface ZettleRefund {
  amount: number;
  reason?: string;
  refundedAt?: string;
  receiptNumber?: string;
}

export interface ZettleVat {
  amount: number;
  rate?: number;
}

// Webhook types
export interface ZettleWebhook {
  uuid: string;
  url: string;
  eventTypes: ZettleEventType[];
  status: 'ACTIVE' | 'INACTIVE';
  createdAt: string;
  updatedAt: string;
  signingKey?: string;
}

export type ZettleEventType = 
  | 'purchase.created'
  | 'purchase.updated'
  | 'purchase.deleted'
  | 'purchase.refunded'
  | 'inventory.updated'
  | 'inventory.balance.changed'
  | 'product.created'
  | 'product.updated'
  | 'product.deleted'
  | 'application.connected'
  | 'application.disconnected';

export interface ZettleWebhookEvent {
  eventType: ZettleEventType;
  uuid: string;
  timestamp: string;
  merchantUuid: string;
  payload: any;
  signature?: string;
}

// API Response types
export interface ZettleApiResponse<T = any> {
  data?: T;
  error?: ZettleApiError;
  pagination?: ZettlePagination;
}

export interface ZettleApiError {
  error: string;
  errorType: string;
  message: string;
  developerMessage?: string;
  violations?: Array<{
    field?: string;
    message: string;
  }>;
}

export interface ZettlePagination {
  offset: number;
  limit: number;
  total: number;
  hasMore: boolean;
}

// Swedish-specific features
export interface SwedishBusinessInfo {
  organizationNumber: string; // Swedish org number format: XXXXXX-XXXX
  vatRegistered: boolean;
  taxOffice?: string;
  businessType?: 'AB' | 'HB' | 'KB' | 'EF' | 'STIFTELSE' | 'FORENING' | 'OTHER';
  bankgiroNumber?: string;
  plusgiroNumber?: string;
  swishNumber?: string; // Swedish mobile payment
}

export interface ZettleSwedishFeatures {
  swishIntegration?: boolean;
  invoicePayments?: boolean;
  taxReporting?: boolean;
  kassaregister?: { // Swedish cash register law compliance
    enabled: boolean;
    registerId?: string;
    controlUnitId?: string;
  };
  employeeManagement?: boolean;
  tipDistribution?: boolean;
}

// Cache types
export interface ZettleTransactionCache {
  transactions: ZettlePurchase[];
  timestamp: Date;
  locationId?: string;
}

// OAuth types
export interface ZettleOAuthTokenResponse {
  access_token: string;
  refresh_token?: string;
  expires_in: number;
  scope: string;
  token_type: string;
}

// Finance types
export interface ZettleFinanceReport {
  periodStart: string;
  periodEnd: string;
  currency: string;
  totalRevenue: number;
  totalRefunds: number;
  netRevenue: number;
  transactionCount: number;
  averageTransactionValue: number;
  paymentMethodBreakdown: Record<string, {
    count: number;
    amount: number;
  }>;
  vatBreakdown: Record<string, {
    rate: number;
    netAmount: number;
    vatAmount: number;
    grossAmount: number;
  }>;
}

// Integration status
export interface ZettleIntegrationStatus {
  connected: boolean;
  lastSync?: Date;
  organizationId?: string;
  merchantName?: string;
  locations?: number;
  devices?: number;
  capabilities: string[];
}